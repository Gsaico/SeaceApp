//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015/10/20 - 23:37:23
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using SeaceWCF.Dtos;
using SeaceWCF;

namespace SeaceWCF.Assembler
{

    /// <summary>
    /// Assembler for <see cref="forumCategory"/> and <see cref="forumCategoryDTO"/>.
    /// </summary>
    public static partial class forumCategoryAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="forumCategoryDTO"/> converted from <see cref="forumCategory"/>.</param>
        static partial void OnDTO(this forumCategory entity, forumCategoryDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="forumCategory"/> converted from <see cref="forumCategoryDTO"/>.</param>
        static partial void OnEntity(this forumCategoryDTO dto, forumCategory entity);

        /// <summary>
        /// Converts this instance of <see cref="forumCategoryDTO"/> to an instance of <see cref="forumCategory"/>.
        /// </summary>
        /// <param name="dto"><see cref="forumCategoryDTO"/> to convert.</param>
        public static forumCategory ToEntity(this forumCategoryDTO dto)
        {
            if (dto == null) return null;

            var entity = new forumCategory();

            entity.idCategory = dto.idCategory;
            entity.title = dto.title;
            entity.description = dto.description;
            entity.date = dto.date;
            entity.ip = dto.ip;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="forumCategory"/> to an instance of <see cref="forumCategoryDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="forumCategory"/> to convert.</param>
        public static forumCategoryDTO ToDTO(this forumCategory entity)
        {
            if (entity == null) return null;

            var dto = new forumCategoryDTO();

            dto.idCategory = entity.idCategory;
            dto.title = entity.title;
            dto.description = entity.description;
            dto.date = entity.date;
            dto.ip = entity.ip;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="forumCategoryDTO"/> to an instance of <see cref="forumCategory"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<forumCategory> ToEntities(this IEnumerable<forumCategoryDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="forumCategory"/> to an instance of <see cref="forumCategoryDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<forumCategoryDTO> ToDTOs(this IEnumerable<forumCategory> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
